generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-arm64-openssl-3.0.x"]
}

datasource db {
  provider = "mysql"
  url      = "mysql://root:1234@localhost:3306/db"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String         @id @default(cuid())
  name          String?
  email         String?        @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  createdAt     DateTime       @default(now())
  posts         Post[]
  Like          Like[]
  Notification  Notification[]
  relatedUser   Notification[] @relation(name: "relatedUser")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Post {
  id           Int            @id @default(autoincrement())
  content      String         @db.VarChar(500)
  createdAt    DateTime       @default(now())
  // author with relation to User
  author       User           @relation(fields: [authorId], references: [id])
  authorId     String
  // likes with relation to Like
  likes        Like[]
  Notification Notification[]
}

model Like {
  id           Int            @id @default(autoincrement())
  createdAt    DateTime       @default(now())
  // author with relation to User
  author       User           @relation(fields: [authorId], references: [id])
  authorId     String
  // post with relation to Post
  post         Post           @relation(fields: [postId], references: [id])
  postId       Int
  // type of like
  type         Boolean? // true = like, false = dislike, null = nothing
  Notification Notification[]
}

model Notification {
  id            Int              @id @default(autoincrement())
  createdAt     DateTime         @default(now())
  //for which User the notification is
  user          User             @relation(fields: [userId], references: [id])
  userId        String
  //content of the notification
  seen          Boolean          @default(false) // true = seen, false = unseen
  type          NotificationType
  //related info(Post, Like,...)
  relatedPost   Post?            @relation(fields: [relatedPostId], references: [id])
  relatedPostId Int?
  relatedLike   Like?            @relation(fields: [relatedLikeId], references: [id])
  relatedLikeId Int?
  relatedUser   User?            @relation(name: "relatedUser", fields: [relatedUserId], references: [id])
  relatedUserId String?
}

enum NotificationType {
  Like
  Dislike
  Comment
  Follow
}
